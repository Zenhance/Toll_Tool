--CREATE USER demo1 IDENTIFIED BY demo1
--SET SERVEROUTPUT ON



--CREATING DEMO TABLES

CREATE TABLE TOLL_AMOUNT_INFO
(
    CAR_TYPE NVARCHAR2 (10),
    AMOUNT NUMBER
);

INSERT INTO TOLL_AMOUNT_INFO VALUES ('HEAVY',1000);
INSERT INTO TOLL_AMOUNT_INFO VALUES ('MEDIUM',600);
INSERT INTO TOLL_AMOUNT_INFO VALUES ('LIGHT',300);



CREATE TABLE CITIZEN
(
    N_ID               NUMBER,
    NAME                NVARCHAR2 (30) NOT NULL ,
    DRIVING_LICENSE_NO NVARCHAR2 (25),
    MOBILE_NO          NVARCHAR2 (11) NOT NULL,
    CHECK (LENGTH(MOBILE_NO) = 11),
    PRIMARY KEY (N_ID)
);

INSERT INTO CITIZEN VALUES (1001,'A','ABC123',11234567891);
INSERT INTO CITIZEN VALUES (1002,'B','ABC456',11234567892);
INSERT INTO CITIZEN VALUES (1003,'C','ABC567',11234567893);
INSERT INTO CITIZEN VALUES (1004,'D','ABC890',11234567894);



CREATE TABLE CAR_INFO
(
    REGISTRANT_ID NUMBER,
    REGISTRANT_NAME NVARCHAR2 (30),
    PLATE_NO NVARCHAR2 (30),
    ENGINE_NO NUMBER,
    CHASSIS_NO NVARCHAR2 (30),
    CAR_TYPE NVARCHAR2 (20),
    PRIMARY KEY (PLATE_NO),
    FOREIGN KEY (REGISTRANT_ID) REFERENCES CITIZEN(N_ID)
);

INSERT INTO CAR_INFO VALUES(1002,'B','ঢাকা মেট্রো-গ ২৯-৭০৭৬',1234,1234,'LIGHT');
INSERT INTO CAR_INFO VALUES(1003,'C','ঢাকা মেট্রোগ ২৭-৬৮৮৪',1235,1235,'MEDIUM');
INSERT INTO CAR_INFO VALUES(1001,'A','ঢাকা মেট্টা গ ৩৫ -৮৯৬৯',1236,1236,'HEAVY');



CREATE TABLE ACCOUNT
(
    IDENTIFYING_ID NUMBER,
    ACC_NO NUMBER,
    NAME NVARCHAR2(30),
    BALANCE NUMBER,
    PRIMARY KEY (ACC_NO),
    FOREIGN KEY (IDENTIFYING_ID) REFERENCES CITIZEN(N_ID)
);

INSERT INTO ACCOUNT VALUES (1001,123456789,'A',10000);
INSERT INTO ACCOUNT VALUES (1002,223456789,'B',50000);
INSERT INTO ACCOUNT VALUES (1003,323456789,'C',30000);
INSERT INTO ACCOUNT VALUES (1004,423456789,'D',15000);







--GETTING BALANCE OF CAR OWNER

CREATE OR REPLACE FUNCTION GET_BALANCE(TEXT IN NVARCHAR2)
RETURN NUMBER
AS
ACC_BALANCE NUMBER;
BEGIN
SELECT BALANCE INTO ACC_BALANCE
FROM CAR_INFO,CITIZEN,ACCOUNT
WHERE CAR_INFO.REGISTRANT_ID = CITIZEN.N_ID
AND CITIZEN.N_ID = ACCOUNT.IDENTIFYING_ID
AND CAR_INFO.PLATE_NO = TEXT;

RETURN ACC_BALANCE;
END;
/


-- GETTING TOLL AMOUNT FOR CAR

CREATE OR REPLACE FUNCTION GET_AMOUNT(TEXT IN NVARCHAR2)
RETURN NUMBER
AS
AMOUNT_FOR_CAR NUMBER;
BEGIN
SELECT AMOUNT INTO AMOUNT_FOR_CAR
FROM CAR_INFO,TOLL_AMOUNT_INFO
WHERE CAR_INFO.PLATE_NO = TEXT
AND CAR_INFO.CAR_TYPE = TOLL_AMOUNT_INFO.CAR_TYPE;

RETURN AMOUNT_FOR_CAR;
END;
/






-- PROCEDURE TO UPDATE BALANCE 
CREATE OR REPLACE PROCEDURE UPDATE_BALANCE(NEW_BALANCE IN NUMBER,TEXT IN NVARCHAR2)
AS
ACCOUNT_NUMBER NUMBER;
BEGIN
SELECT ACC_NO INTO ACCOUNT_NUMBER
FROM CAR_INFO,CITIZEN,ACCOUNT
WHERE CAR_INFO.REGISTRANT_ID = CITIZEN.N_ID
AND CITIZEN.N_ID = ACCOUNT.IDENTIFYING_ID 
AND CAR_INFO.PLATE_NO = TEXT;

UPDATE ACCOUNT
SET BALANCE = NEW_BALANCE
WHERE ACC_NO = ACCOUNT_NUMBER;
COMMIT;
END;
/


--CREATING CHECK TO ENSURE CAR PASS

CREATE OR REPLACE FUNCTION CAR_PASS(TEXT IN NVARCHAR2)
RETURN NVARCHAR2
AS
CURRENT_BALANCE NUMBER;
CAR_STATUS NVARCHAR2(10);
BEGIN
SELECT BALANCE INTO CURRENT_BALANCE
FROM CAR_INFO,CITIZEN,ACCOUNT
WHERE CAR_INFO.REGISTRANT_ID = CITIZEN.N_ID
AND CITIZEN.N_ID = ACCOUNT.IDENTIFYING_ID 
AND CAR_INFO.PLATE_NO = TEXT;

IF CURRENT_BALANCE < -1500
THEN CAR_STATUS := 'STOP';
ELSE
CAR_STATUS := 'GO';
END IF;
RETURN CAR_STATUS;
END;
/




--KEEPING EVENT LOG

CREATE OR REPLACE PROCEDURE EVENT_LOG(TEXT IN NVARCHAR2,BRI_ID IN NVARCHAR2,BOOT_ID IN NVARCHAR2)
IS
    OWNER_NAME NVARCHAR2(30);
    NATIONAL_ID NUMBER;
    DRIVING_LICENSE NVARCHAR2(25);
    CURSOR CUR_EVENT_LOG IS
        SELECT CITIZEN.NAME,N_ID,DRIVING_LICENSE_NO
            FROM CITIZEN,CAR_INFO,ACCOUNT
                WHERE CAR_INFO.REGISTRANT_ID = CITIZEN.N_ID
                AND CITIZEN.N_ID = ACCOUNT.IDENTIFYING_ID
                AND CAR_INFO.REGISTRANT_NAME = CITIZEN.NAME
                AND CAR_INFO.PLATE_NO = TEXT;
BEGIN
    OPEN CUR_EVENT_LOG;
    LOOP
        FETCH CUR_EVENT_LOG INTO OWNER_NAME,NATIONAL_ID,DRIVING_LICENSE;
        EXIT WHEN CUR_EVENT_LOG%NOTFOUND;
        INSERT INTO EVENT(NAME, N_ID, DRIVING_LICENSE_NO, TIME, BRIDGE_ID, PLATE_NUM, BOOTH_ID) VALUES (OWNER_NAME,NATIONAL_ID,DRIVING_LICENSE,SYSDATE,BRI_ID,TEXT,BOOT_ID);
    END LOOP;
    CLOSE CUR_EVENT_LOG;
COMMIT;
END;
/

CREATE OR REPLACE FUNCTION FIND_CAR_OWNER(TEXT IN VARCHAR2)
RETURN NVARCHAR2
IS
    NAME NVARCHAR2(30);
BEGIN
    SELECT REGISTRANT_NAME INTO NAME
        FROM CAR_INFO
            WHERE PLATE_NO = TEXT;
    RETURN NAME;
end;
/

CREATE OR REPLACE PROCEDURE BOOTH_MANAGER_REG(BRI_ID IN NVARCHAR2, TOLL_PLAZA_NUM IN NUMBER,BOOTH_NO IN NVARCHAR2)
IS
BEGIN
    INSERT INTO SPL2.BRIDGE (BRIDGE_ID, TOLL_PLAZA_NO ) VALUES (BRI_ID,TOLL_PLAZA_NUM);
    INSERT INTO SPL2.TOLL_BOOTH(BOOTH_PLACE, BOOTH_ID) VALUES (BRI_ID,BOOTH_NO);
    COMMIT ;
end;
/

CREATE OR REPLACE FUNCTION USER_LOGIN(NAAM IN NVARCHAR2, ID IN NUMBER)
RETURN NUMBER
IS
    CNT NUMBER;
BEGIN
    SELECT COUNT(CITIZEN.N_ID) INTO CNT
        FROM CITIZEN
            WHERE CITIZEN.N_ID=ID AND CITIZEN.NAME = NAAM;
    RETURN CNT;
end;
/


CREATE OR REPLACE FUNCTION USE_ACC_BALANCE(ID IN NUMBER)
RETURN NUMBER
IS
    AMO NUMBER;
BEGIN
    SELECT BALANCE INTO AMO
        FROM ACCOUNT
            WHERE ACCOUNT.IDENTIFYING_ID = ID;
    RETURN AMO;
end;
/

declare
    ans number;
    begin
    ans:=USE_ACC_BALANCE(1001);
    DBMS_OUTPUT.PUT_LINE(ans);
    end;
/